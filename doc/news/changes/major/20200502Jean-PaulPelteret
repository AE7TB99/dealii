New: The new Differentiation::SD::BatchOptimizer class can be used to accelerate
(in some cases, significantly) evaluation of the symbolic expressions using an
assortment of techniques. At the moment, this includes using common
subexpression elimination to prevent, as much as possible, repetitive evaluation
of subexpressions that are found in one or more expressions. The expressions
may also be transformed into other equivalent data structures that are simply
less computationally costly than their original symbolic expression tree.
It is also possible to compile a set of expressions using the LLVM JIT compiler,
rendering near-native evaluation performance at the cost of the compilation
itself.
<br>
(Jean-Paul Pelteret, 2020/05/02)
