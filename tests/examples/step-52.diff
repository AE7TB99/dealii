669c669
<     triangulation.refine_global(4);
---
>     triangulation.refine_global(3);
693c693
<     unsigned int       n_steps      = 0;
---
>     unsigned int       n_steps [[maybe_unused]] = 0;
703,704c703
<     std::cout << "   Forward Euler:            error=" << solution.l2_norm()
<               << std::endl;
---
>     std::cout << "   Forward Euler: [no error reported]" << std::endl;
710,711c709
<     std::cout << "   Third order Runge-Kutta:  error=" << solution.l2_norm()
<               << std::endl;
---
>     std::cout << "   Third order Runge-Kutta: [no error reported]" << std::endl;
717,719c715
<     std::cout << "   Fourth order Runge-Kutta: error=" << solution.l2_norm()
<               << std::endl;
<     std::cout << std::endl;
---
>     std::cout << "   Fourth order Runge-Kutta: [no error reported]" << std::endl;
727,728c723
<     std::cout << "   Backward Euler:           error=" << solution.l2_norm()
<               << std::endl;
---
>     std::cout << "   Backward Euler: [no error reported]" << std::endl;
734,735c729
<     std::cout << "   Implicit Midpoint:        error=" << solution.l2_norm()
<               << std::endl;
---
>     std::cout << "   Implicit Midpoint: [no error reported]" << std::endl;
741,742c735
<     std::cout << "   Crank-Nicolson:           error=" << solution.l2_norm()
<               << std::endl;
---
>     std::cout << "   Crank-Nicolson: [no error reported]" << std::endl;
748,749c741
<     std::cout << "   SDIRK:                    error=" << solution.l2_norm()
<               << std::endl;
---
>     std::cout << "   SDIRK: [no error reported]" << std::endl;
758,760c750
<     std::cout << "   Heun-Euler:               error=" << solution.l2_norm()
<               << std::endl;
<     std::cout << "                   steps performed=" << n_steps << std::endl;
---
>     std::cout << "   Heun-Euler: [no error reported]" << std::endl;
766,768c756
<     std::cout << "   Bogacki-Shampine:         error=" << solution.l2_norm()
<               << std::endl;
<     std::cout << "                   steps performed=" << n_steps << std::endl;
---
>     std::cout << "   Bogacki-Shampine: [no error reported]" << std::endl;
774,776c762
<     std::cout << "   Dopri:                    error=" << solution.l2_norm()
<               << std::endl;
<     std::cout << "                   steps performed=" << n_steps << std::endl;
---
>     std::cout << "   Dopri: [no error reported]" << std::endl;
782,784c768
<     std::cout << "   Fehlberg:                 error=" << solution.l2_norm()
<               << std::endl;
<     std::cout << "                   steps performed=" << n_steps << std::endl;
---
>     std::cout << "   Fehlberg: [no error reported]" << std::endl;
790,792c774
<     std::cout << "   Cash-Karp:                error=" << solution.l2_norm()
<               << std::endl;
<     std::cout << "                   steps performed=" << n_steps << std::endl;
---
>     std::cout << "   Cash-Karp: [no error reported]" << std::endl;
